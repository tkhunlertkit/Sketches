{
  "_args": [
    [
      {
        "raw": "pug-lint",
        "scope": null,
        "escapedName": "pug-lint",
        "name": "pug-lint",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/MSDK/Work/Sketches/nodejs/nodejs_examples/express"
    ]
  ],
  "_from": "pug-lint@latest",
  "_id": "pug-lint@2.4.0",
  "_inCache": true,
  "_location": "/pug-lint",
  "_nodeVersion": "4.3.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/pug-lint-2.4.0.tgz_1485944967650_0.9788923095911741"
  },
  "_npmUser": {
    "name": "benedfit",
    "email": "hello@benedfit.com"
  },
  "_npmVersion": "2.15.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pug-lint",
    "scope": null,
    "escapedName": "pug-lint",
    "name": "pug-lint",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/pug-lint/-/pug-lint-2.4.0.tgz",
  "_shasum": "1f584c1624fac48e5a0d03e40823caef736702e0",
  "_shrinkwrap": null,
  "_spec": "pug-lint",
  "_where": "/Users/MSDK/Work/Sketches/nodejs/nodejs_examples/express",
  "author": {
    "name": "Ben Edwards",
    "email": "hello@benedfit.com"
  },
  "bin": {
    "pug-lint": "./bin/pug-lint"
  },
  "bugs": {
    "url": "https://github.com/pugjs/pug-lint/issues"
  },
  "dependencies": {
    "acorn": "^4.0.1",
    "commander": "^2.9.0",
    "css-selector-parser": "^1.1.0",
    "find-line-column": "^0.5.2",
    "glob": "^7.0.3",
    "minimatch": "^3.0.3",
    "path-is-absolute": "^1.0.0",
    "pug-attrs": "^2.0.1",
    "pug-error": "^1.3.0",
    "pug-lexer": "^2.0.1",
    "resolve": "^1.1.7",
    "strip-json-comments": "^2.0.1",
    "void-elements": "^2.0.1"
  },
  "description": "An unopinionated and configurable linter and style checker for Pug (formerly Jade)",
  "devDependencies": {
    "camel-case": "^3.0.0",
    "changelog": "^1.0.7",
    "david": "^7.0.0",
    "docco": "^0.7.0",
    "istanbul": "^0.4.0",
    "jsinspect": "^0.8.0",
    "mocha": "^2.3.3",
    "moment": "^2.11.2",
    "no-case": "^2.3.0",
    "pliers": "^1.2.1",
    "pug-lint-config-clock": "^1.1.0",
    "rimraf": "^2.5.2",
    "semver-regex": "^1.0.0",
    "sinon": "^1.17.2",
    "xo": "^0.15.1",
    "yeoman-generator": "^0.23.3",
    "yo": "^1.8.4"
  },
  "directories": {},
  "dist": {
    "shasum": "1f584c1624fac48e5a0d03e40823caef736702e0",
    "tarball": "https://registry.npmjs.org/pug-lint/-/pug-lint-2.4.0.tgz"
  },
  "gitHead": "d87bbb3f8e7d95228c03e5ffac6a2c4dd7dc59b4",
  "homepage": "https://github.com/pugjs/pug-lint",
  "keywords": [
    "puglint",
    "jadelint",
    "pug-lint",
    "jade-lint",
    "pug",
    "jade",
    "lint",
    "code style",
    "formatter",
    "style guide",
    "validate",
    "lint pug",
    "lint jade",
    "pug lint",
    "jade lint",
    "linter",
    "linter pug",
    "linter jade",
    "pug linter",
    "jade linter",
    "pug-linter",
    "jade-linter",
    "linting",
    "linting pug",
    "linting jade",
    "pug linting",
    "jade linting",
    "pug-linting",
    "jade-linting",
    "hint",
    "hint pug",
    "hint jade",
    "pug hint",
    "jade hint",
    "pug-hint",
    "jade-hint",
    "hinter",
    "hinter pug",
    "hinter jade",
    "pug hinter",
    "jade hinter",
    "pug-hinter",
    "jade-hinter",
    "hinting",
    "hinting pug",
    "hinting jade",
    "pug hinting",
    "jade hinting",
    "pug-hinting",
    "jade-hinting"
  ],
  "license": "ISC",
  "main": "./lib/linter",
  "maintainers": [
    {
      "name": "benedfit",
      "email": "hello@benedfit.com"
    },
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "timothygu",
      "email": "timothygu99@gmail.com"
    }
  ],
  "name": "pug-lint",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "http://registry.npmjs.org"
  },
  "readme": "# pug-lint\n\nAn unopinionated and configurable linter and style checker for Pug (formerly Jade)\n\n> v2 under active development. Watch this space as issues are fixed, and the [rules roll in](https://github.com/pugjs/pug-lint/issues/3) :rainbow::rabbit:\n\n[![build status](https://img.shields.io/travis/pugjs/pug-lint/master.svg)](https://travis-ci.org/pugjs/pug-lint)\n[![coverage status](https://img.shields.io/codecov/c/github/pugjs/pug-lint/master.svg)](https://codecov.io/gh/pugjs/pug-lint)\n[![dependency status](https://img.shields.io/david/pugjs/pug-lint.svg)](https://david-dm.org/pugjs/pug-lint)\n[![npm](https://img.shields.io/npm/v/pug-lint.svg)](https://www.npmjs.com/package/pug-lint)\n\n## CLI\n\n### Installation\n\n```shell\n$ npm install -g pug-lint\n```\n\n### Usage\n\n```shell\n$ pug-lint [options] <file ...>\n```\n\n#### Options\n\n* `-h, --help`: output usage information\n* `-V, --version`: output the version number\n* `-c, --config <path>`: [configuration file](#configuration-file) path\n* `-r, --reporter <reporter>`: error reporter; console - default, inline\n\n## Editor integration\n\n### Sublime Text 3\n\nIf you use SublimeLinter 3 with Sublime Text 3, you can install the\n[SublimeLinter-pug-lint](https://github.com/benedfit/SublimeLinter-contrib-pug-lint)\nplugin using [Package Control](https://packagecontrol.io/).\n\n### Atom\n\nIf you use Atom, you can install the [linter-pug](https://atom.io/packages/linter-pug) package.\n\n### VS Code\n\nIf you use VS Code, you can install the [vscode-puglint](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-puglint) extension.\n\n### Vim\n\npug-lint is part of [syntastic](https://github.com/scrooloose/syntastic).\n\nIf you are using [vim-plug](https://github.com/junegunn/vim-plug) to manage your\nVim plugins (recommended), you can do:\n\n```\n\" In your ~/.vimrc\nPlug 'scrooloose/syntastic'\n\" Then run these commands\n:source %\n:PlugInstall\n```\n\nThen to turn the pug linter on, you will need this line in your `.vimrc`.\n\n```\nlet g:syntastic_pug_checkers = ['pug_lint']\n```\n\n## Build system integration\n\n### Gulp\n\nIf you're using Gulp as your build system, you can use [gulp-pug-lint](https://github.com/emartech/gulp-pug-lint) for easier integration.\n\n### Grunt\n\nIf you're using Grunt as your build system, you can use [grunt-puglint](https://github.com/mrmlnc/grunt-puglint) for easier integration.\n\n## Configuration file\n\nOptions and rules can be specified in a `.pug-lintrc`, `.pug-lintrc.js`, or `.pug-lintrc.json` file, or via adding a `\"pugLintConfig\"` option to `package.json`.\n\n### Options\n\n#### preset `deprecated`\n\nPresets have been deprecated in favour of [extending configuration files](#extends).\n\n> Instructions for those wishing to continue to use the rules defined in the deprecated `clock` preset can be found at https://github.com/pugjs/pug-lint/issues/80#issuecomment-223283681\n\n#### extends\n\nType: `string`\n\nIf you want to extend a specific configuration file, you can use the `extends` property and specify the path to the file. The path can be either relative or absolute\n\nConfigurations can be extended by using:\n\n1. JSON file\n2. JS file\n3. [Shareable configuration package](#shareable-configuration-packages)\n\nThe extended configuration provides base rules, which can be overridden by the configuration that references it. For example:\n\n```json\n{\n  \"extends\": \"./node_modules/coding-standard/.pug-lintrc\",\n  \"disallowIdLiterals\": null\n}\n```\n\nYou can also extend configurations using [shareable configuration packages](#shareable-configuration-packages). To do so, be sure to install the configuration package you want from npm and then use the package name, such as:\n\n```shell\n$ npm install --save-dev pug-lint-config-clock\n```\n\n```json\n{\n  \"extends\": \"pug-lint-config-myrules\",\n  \"disallowIdLiterals\": null\n}\n```\n\nIn this example, the `pug-lint-config-myrules` package will be loaded as an object and used as the parent of this configuration. You can override settings from the shareable configuration package by adding them directly into your `.pug-lintrc` file.\n\n> **Note**: You can omit `pug-lint-config-` and pug-lint will automatically insert it for you\n\n#### excludeFiles\n\nType: `Array`\n\nDefault: `[\"node_modules/**\"]`\n\nDisables style checking for specified paths declared with glob patterns.\n\n#### additionalRules\n\nType: `Array`\n\nArray of file path matching patterns to load additional rules from, e.g.:\n\n```json\n{\n  \"additionalRules\": [\"project-rules/*.js\"]\n}\n```\n\n### Rules\n\n[List of available rules](docs/rules.md)\n\nYou can specifically disable any rule by omitting it from your `.pug-lintrc` config file or by assigning it to null, like so:\n\n```json\n{\n  \"disallowBlockExpansion\": null\n}\n```\n\nSome rules, if enabled at the same time, would be contradictory to one another, such as:\n\n```json\n{\n  \"disallowSpaceAfterCodeOperator\": true,\n  \"requireSpaceAfterCodeOperator\": true\n}\n```\n\nIn this case `requireSpaceAfterCodeOperator` is treated as null, and ignored.\n\n### Shareable configuration packages\n\nShareable configs are simply npm packages that export a configuration object. To start, [create a Node.js module](https://docs.npmjs.com/getting-started/creating-node-modules) like you normally would. Make sure the module name begins with `pug-lint-config-`, such as `pug-lint-config-myconfig`. Create a new index.js file and export an object containing your settings:\n\n```js\nmodule.exports = {\n  disallowBlockExpansion: true\n};\n```\n\nOnce your shareable config is ready, you can [publish to npm](https://docs.npmjs.com/getting-started/publishing-npm-packages) to share with others. We recommend using the `puglint` and `puglintconfig` keywords so others can easily find your module.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/pugjs/pug-lint.git"
  },
  "scripts": {
    "changelog": "pliers buildChangelog",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha test",
    "depcheck": "david",
    "docs": "pliers buildRuleDocs",
    "inspect": "jsinspect",
    "lint": "xo",
    "posttest": "(istanbul check-coverage --statements 90 --branches 90 --functions 100 --lines 90 && rimraf coverage) || echo Look at 'coverage/lcov-report/index.html' to find out more",
    "pretest": "npm run docs && npm run schema && npm run lint",
    "schema": "pliers buildJsonSchema",
    "test": "npm run coverage"
  },
  "version": "2.4.0",
  "xo": {
    "space": true,
    "envs": [
      "node",
      "mocha"
    ],
    "ignores": [
      "generators/*-templates/**"
    ]
  }
}
